#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define clear() printf("\033[H\033[J")

typedef struct {
    int day;
    int month;
    int year;
} birth_date;

typedef struct {
    char name[50];
    char surname[50];
    birth_date birthday;
} person;

#define MAX_RECORDS 100

person notebook[MAX_RECORDS];

int num_records = 0;

void add_record() {
    if (num_records == MAX_RECORDS) {
        printf("Записная книжка заполнена, невозможно добавить новую запись.\n");
        return;
    }
    person p;
    printf("Введите имя: ");
    scanf("%s", p.name);
    printf("Введите фамилию: ");
    scanf("%s", p.surname);
    printf("Введите день рождения: ");
    scanf("%d", &p.birthday.day);
    printf("Введите месяц рождения: ");
    scanf("%d", &p.birthday.month);
    printf("Введите год рождения: ");
    scanf("%d", &p.birthday.year);
    notebook[num_records] = p;
    num_records++;
    printf("Запись успешно добавлена.\n");
}

void delete_record(int index) {
    if (index < 0 || index >= num_records) {
        printf("Неверный индекс, невозможно удалить запись.\n");
        return;
    }
    for (int i = index; i < num_records - 1; i++) {
        notebook[i] = notebook[i + 1];
    }
    num_records--;
    printf("Запись успешно удалена.\n");
}

void save_to_file(char *filename) {
    FILE *f = fopen(filename, "wb");
    if (f == NULL) {
        printf("Невозможно открыть файл.\n");
        return;
    }
    fwrite(&num_records, sizeof(int), 1, f);
    fwrite(notebook, sizeof(person), num_records, f);
    fclose(f);
    printf("Записная книжка успешно сохранена в файл %s.\n", filename);
}

void open_file(char *filename)
{
    FILE *f = fopen(filename, "r");
    if (f == NULL) {
        printf("Невозможно открыть файл.\n");
        return;
    }
    int num;
    fread(&num, sizeof(int), 1, f);
    fread(notebook, sizeof(person), num, f);
    num_records++;
}

int compare_dates(birth_date d1, birth_date d2) {
    if (d1.year < d2.year) {
        return -1;
    }
    if (d1.year > d2.year) {
        return 1;
    }
    if (d1.month < d2.month) {
        return -1;
    }
    if (d1.month > d2.month) {
        return 1;
    }
    if (d1.day < d2.day) {
        return -1;
    }
    if (d1.day > d2.day) {
        return 1;
    }
    return 0;
}

void sort_by_birthday() {
    for (int i = 0; i < num_records - 1; i++) {
        for (int j = 0; j < num_records - i - 1; j++) {
            if (compare_dates(notebook[j].birthday, notebook[j + 1].birthday) > 0) {
                person temp = notebook[j];
                notebook[j] = notebook[j + 1];
                notebook[j + 1] = temp;
            }
        }
    }
    printf("Записная книжка отсортирована по дате рождения.\n");
}

int search_by_name_and_surname(char *name, char *surname) {
    for (int i = 0; i < num_records; i++) {
        if (strcmp(notebook[i].name, name) == 0 && strcmp(notebook[i].surname, surname) == 0) {
            return i;
        }
    }
    return -1;
}

void print_record(int index) {
    if (index < 0 || index >= num_records) {
        printf("Неверный индекс, невозможно вывести запись.\n");
        return;
    }
    printf("Имя: %s\n", notebook[index].name);
    printf("Фамилия: %s\n", notebook[index].surname);
    printf("Дата рождения: %d.%d.%d\n", notebook[index].birthday.day, notebook[index].birthday.month, notebook[index].birthday.year);
}

void menu() {
    printf("Выберите операцию:\n");
    printf("1. Добавить новую запись\n");
    printf("2. Удалить запись\n");
    printf("3. Сохранить записную книжку в файл\n");
    printf("4. Отсортировать записную книжку по дате рождения\n");
    printf("5. Найти запись по имени и фамилии\n");
    printf("6. Вывести запись на экран\n");
    printf("7. Открыть файл\n");
    int choice;
    int index;
    char filename[50];
    scanf("%d", &choice);
    clear();
    switch (choice) {
        case 1:
            add_record();
            break;
        case 2:
            printf("Введите индекс записи, которую хотите удалить: ");
            scanf("%d", &index);
            delete_record(index);
            break;
        case 3:
            printf("Введите название файла: ");
            scanf("%s", filename);
            save_to_file(filename);
            break;
        case 4:
            sort_by_birthday();
            break;
        case 5:
            printf("Введите имя: ");
            char *name, *surname;
            scanf("%s", name);
            printf("Введите фамилию: ");
            scanf("%s", surname);
            search_by_name_and_surname(name, surname);
            break;
        case 6:
            printf("Введите индекс записи, которую хотите вывести: ");
            scanf("%d", &index);
            print_record(index);
            break;
        case 7:
            printf("Введите название файла: ");
            scanf("%s", filename);
            open_file(filename);
            break;
    }
}

int main()
{
    while (1)
    {
        menu();
        printf("\n\n");
    }
}
